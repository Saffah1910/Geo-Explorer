<div>Teachable Machine Image Model</div>



<style>

      /* Add this to your existing styles or include it in your style.css file */

.flag-recognition {
    max-width: 600px;
    margin: 20px auto;
    padding: 20px;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    text-align: center;
    height: 500px;
}

.flag-recognition h2 {
    color: #3498db;
    font-size: 24px;
    margin-bottom: 10px;
}

.flag-recognition p {
    font-size: 16px;
    line-height: 1.5;
    color: #333;
}

.flag-recognition img {
    max-width: 100%;
    height: 200px;
    margin: 15px 0;
    border: 1px solid #ddd; /* Add a border to the image */
    border-radius: 5px; /* Optional: rounded corners for the image */
}

.flag-recognition button {
    padding: 10px 20px;
    font-size: 16px;
    color: #fff;
    text-decoration: none;
    background-color: #27ae60; /* Green color, change to your preference */
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.flag-recognition button:hover {
    background-color: #218c53; /* Darker green color on hover */
}

#label-container div:nth-child(1), #label-container div:nth-child(2) {
     height: inherit;
}


</style>

 <div class="flag-recognition">
      <h2>Flag Recognition</h2>
      <p>Present a flag in the webcam and our AI/ML Model will identify it.</p>
      <div id="webcam-container"></div>

    <button type="button" onclick="init()">Start</button>
<div id="label-container"></div>
      
</div>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
<script type="text/javascript">
    // More API functions here:
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/cob0meew_/";

    let model, webcam, labelContainer, maxPredictions;

    // Load the image model and setup the webcam
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
        }
    }

    async function loop() {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }

    // run the webcam image through the image model
    async function predict() {
        // predict can take in an image, video or canvas html element
        const prediction = await model.predict(webcam.canvas);
        for (let i = 0; i < maxPredictions; i++) {
            const classPrediction =
                prediction[i].className + ": " + prediction[i].probability.toFixed(2);
            labelContainer.childNodes[i].innerHTML = classPrediction;
        }
    }
</script>