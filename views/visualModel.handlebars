<div class="flag-recognition">
    <h2>Flag Recognition</h2>
    <p>Present a flag in the webcam and our AI/ML Model will identify it.</p>
    <div id="webcam-container"></div>

    <button type="button" onclick="init()">Start</button>
    <div id="label-container"></div>

</div>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
<script type="text/javascript">
    // More API functions here:
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/cob0meew_/";

    let model, webcam, labelContainer, maxPredictions;

    // Load the image model and setup the webcam
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
        }
    }

    async function loop() {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }

    // run the webcam image through the image model
    async function predict() {
        // predict can take in an image, video or canvas html element
        const flagRecognition = document.querySelector(".flag-recognition");

        const prediction = await model.predict(webcam.canvas);
        for (let i = 0; i < maxPredictions; i++) {

            if (prediction[i].probability.toFixed(2) == "1.00" && prediction[i].className != "Nothing") {
                flagRecognition.innerHTML = "";

                const h2 = document.createElement("h2");
                const img = document.createElement("img");
                const p = document.createElement("p");
                const a = document.createElement("a");
                const div = document.createElement("div");
                const div2 = document.createElement("div");

                h2.innerText = `${prediction[i].className}`;
                a.innerText = `Learn more`;
                img.src = `/images/flags/${prediction[i].className}.jpg`;
                img.className = "flag";
                p.innerText = `The flag has been identified as ${prediction[i].className}`;
                a.href = `/moreInfo?country=${prediction[i].className}`
                a.className = "more-info-btn"
                div.append(img);
                div2.append(a);


                flagRecognition.append(h2, div, p, div2)
                //window.location.href = /moreInfo"
            }
        }
    }
</script>